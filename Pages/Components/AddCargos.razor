@using NominaCheck.Data.Models
@using NominaCheck.Data.Services
@using Serilog

<div class="body-form table-container-fix">
    <h4>Agregar Cargos</h4>
    <div class="form-container">
        <div class="box">
            <div class="body-form">
                <div class="form-container">
                    <!-- Cargos -->
                    <div class="input-box show-more">
                        <span class="details"> Codigo </span>
                        <input type="number" @bind="@CodCargo" style="width: 60px;" min=0 disabled />
                        <span class="details"> Cargo </span>
                        <input type="text" @bind="@Descripcion" />
                        <span class="details"> Monto </span>
                        <input type="number" @bind="@Monto" min="0.00" max="10000000.00" step="0.01" />
                        <span class="details"> Departamento </span>
                        @if (Departamentos is not null)
                        {
                            <select @bind="@IdDept">

                                @foreach (Departamento dept in Departamentos)
                                {
                                    <option value="@dept.CodDepartamento">@dept.Descripcion</option>
                                }

                            </select>
                        }
                        <button style="margin-top: 5px;" type="button" class="btn btn-sm btn-style" @onclick="async () => await OnSubmit()">Agregar</button>
                    </div>
                    @RenderMessage
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public CargosServices? Services { get; set; }

    public string Descripcion { get; set; } = string.Empty;
    public int CodCargo { get; set; }
    public decimal Monto { get; set; }

    public List<Departamento> Departamentos { get; set; }
    public int IdDept { get; set; }

    public bool IsValid { get; set; }
    public bool Disapear { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CodCargo = await Services.CountAll();
            CodCargo++;
            Departamentos = await Services.Instance.GetAllAsync();

        }
        catch (Exception ex)
        {

        }

    }

    public async Task OnSubmit()
    {
        // Nuevo Tipo creado
        Cargo newCargo = new()
            {
                CodCargo = CodCargo,
                Descripcion = Descripcion,
                Monto = Monto,
                CodDepartamento = IdDept
            };
        Services.Add(newCargo);

        IsValid = true;
        Disapear = false;

        await Task.Delay(2000);

        IsValid = false;
        Disapear = true;
    }

    private RenderFragment RenderMessage => __builder =>
    {
        if (Disapear)
        {
            <div></div>
        }
        else if (IsValid)
        {
            <div style="display: flex; margin-top: 1px;">
                <div class="alert alert-success" role="alert"> Agregado correctamente </div>
            </div>
        }
        else
        {
            <div style="display: flex; margin-top: 1px;">
                <div class="alert alert-danger" role="alert"> Hubo un error al ingresar los datos. </div>
            </div>
        }
    };
}