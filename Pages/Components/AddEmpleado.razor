@page "/addNomina"
@using NominaCheck.Data.Services
@using NominaCheck.Pages.Components

@inject EmpleadoServices EmpleadoServices
@inject CargosServices CargosServices
@inject NominaServices NominaServices
@inject TiposEmpleadoServices TiposEmpleadoServices

@using NominaCheck.Data.Models
@using Serilog

<div class="body-form table-container-fix">
    <h4>Agregar Cargos</h4>
    <div class="form-container">
        <div class="box">
            <div class="body-form">
                <div class="form-container">

                    <!-- Empleados -->
                    <div class="input-box show-more">

                        <!--Codigo-->
                        <span class="details"> Codigo </span>
                        <input type="number" @bind="@CodEmpleados" style="width: 60px;" min=0 disabled />

                        <!--Nombre-->
                        <span class="details"> Nombre </span>
                        <input type="text" @bind="@Nombre" />

                        <!--Apellido-->
                        <span class="details"> Apellido </span>
                        <input type="text" @bind="@Apellido" />

                        <!--Telefono-->
                        <span class="details"> Telefono </span>
                        <input type="number" @bind="@Telefono" min=0 pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" />

                        <!--Direccion-->
                        <span class="details"> Direccion </span>
                        <input type="text" @bind="@Direccion" />

                        <!--Email-->
                        <span class="details"> Email </span>
                        <input type="text" @bind="@Email" />

                        <!--Cargos-->
                        <span class="details"> Cargos </span>
                        @if (Cargos != null)
                        {
                            <select @bind="@IdCargo" @onclick=" () => OnSelection()">
                                @foreach (var cargos in Cargos)
                                {
                                    <option value="@cargos.CodCargo">@cargos.Descripcion</option>
                                }
                            </select>
                        }

                        <!--Nominas-->
                        <span class="details"> Monto </span>
                        <input type="number" @bind="@Monto" style="width: fit-content;" min=0 disabled />

                        <!--TiposEmpleados-->
                        <span class="details"> TiposEmpleados </span>
                        @if (TiposEmpleados != null)
                        {
                            <select @bind="@IdTipoEmpleado">
                                @foreach (var tipoEmpleado in TiposEmpleados)
                                {
                                    <option value="@tipoEmpleado.CodTipoEmpleado">@tipoEmpleado.Descripcion</option>
                                }
                            </select>
                        }

                        <button style="margin-top: 5px;" type="button" class="btn btn-sm btn-style" @onclick="async () => await OnSubmit()">Agregar</button>
                    </div>
                    @RenderMessage
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public int CodEmpleados { get; set; }
    public string Nombre { get; set; } = "";
    public string Apellido { get; set; } = "";
    public long Telefono { get; set; }
    public string Direccion { get; set; } = "";
    public string Email { get; set; } = "";
    public decimal? Monto { get; set; }

    public List<Cargo>? Cargos { get; set; }
    public int IdCargo { get; set; }

    public List<TiposEmpleado>? TiposEmpleados { get; set; }
    public int IdTipoEmpleado { get; set; }

    public int CodNomina { get; set; }
    public DateTime FechaPago { get; set; } = DateTime.Today;

    public bool IsValid { get; set; }
    public bool Disapear { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        Cargos = await CargosServices.GetAllAsync();
        TiposEmpleados = await TiposEmpleadoServices.GetAllAsync();
        CodEmpleados = await EmpleadoServices.CountAll();
        CodEmpleados++;
        CodNomina = await NominaServices.CountAll();
        CodNomina++;
    }

    public async void OnSelection()
    {
        Monto = Cargos.Find(x => x.CodCargo == IdCargo)?.Monto;
    }

    public async Task OnSubmit()
    {
        // Nueva Nomina creada
        Nomina newNomina = new()
            {
                CodNomina = CodNomina,
                FechaPago = FechaPago,
            };
        await NominaServices.Add(newNomina);

        // Nuevo Empleado creado
        Empleado newEmpleado = new()
            {
                CodEmpleados = CodEmpleados,
                Nombre = Nombre,
                Apellido = Apellido,
                Telefono = Telefono.ToString(),
                Direccion = Direccion,
                Email = Email,
                CodNomina = CodNomina,
                CodCargo = IdCargo,
                CodTipoEmpleado = IdTipoEmpleado
            };

        await EmpleadoServices.Add(newEmpleado);

        IsValid = true;
        Disapear = false;

        await Task.Delay(2000);

        IsValid = false;
        Disapear = true;
    }

    private RenderFragment RenderMessage => __builder =>
    {
        if (Disapear)
        {
            <div></div>
        }
        else if (IsValid)
        {
            <div style="display: flex; margin-top: 1px;">
                <div class="alert alert-success" role="alert"> Agregado correctamente </div>
            </div>
        }
        else
        {
            <div style="display: flex; margin-top: 1px;">
                <div class="alert alert-danger" role="alert"> Hubo un error al ingresar los datos. </div>
            </div>
        }
    };
}