@page "/"

@using System.Diagnostics.CodeAnalysis
@using NominaCheck.Data.Models
@using NominaCheck.Data.Services

@inject EmpleadoServices EmpleadoServices
@inject CargosServices CargosServices
@inject TiposEmpleadoServices TiposEmpleadoServices

<!-- Table -->
<div class="table-container-fix">
    <table class="table-shadow table table-responsive table-bordered dataTable" id="ItemTable">
        <thead>
            <tr role="row" class="unselectable th-index-style">
                <th rowspan="1" colspan="1">Nombre</th>
                <th rowspan="1" colspan="1">Apellido</th>
                <th rowspan="1" colspan="1">Telefono</th>
                <th rowspan="1" colspan="1">Direccion</th>
                <th rowspan="1" colspan="1">Email</th>
                <th rowspan="1" colspan="1">Cargo</th>
                <th rowspan="1" colspan="1">Pago Mensual</th>
                <th rowspan="1" colspan="1">Empleado</th>
            </tr>
        </thead>
        <tbody id="itemTable">
            @if (Data is not null)
            {
                @foreach (var item in Data)
                {
                    <tr role="row" class="tr-index-style">
                        <td class="col-xs-1">@item.Nombre</td>
                        <td class="col-xs-1">@item.Apellido</td>
                        <td class="col-xs-1">@item.Telefono</td>
                        <td class="col-xs-2">@item.Direccion</td>
                        <td class="col-xs-2">@item.Email</td>
                        <td class="col-xs-2">@Cargos?.Where(x => x.CodCargo == item.CodCargo).First().Descripcion</td>
                        <td class="col-xs-1">@Cargos?.Where(x => x.CodCargo == item.CodCargo).First().Monto</td>
                        <td class="col-xs-1">@TiposEmpleados?.Where(x => x.CodTipoEmpleado == item.CodTipoEmpleado).First().Descripcion</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    public IReadOnlyCollection<Empleado>? Data { get; set; }
    public IReadOnlyCollection<Cargo>? Cargos { get; set; }
    public IReadOnlyCollection<TiposEmpleado>? TiposEmpleados { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Data = await EmpleadoServices.GetAllAsync();
            Cargos = await CargosServices.GetAllAsync();
            TiposEmpleados = await TiposEmpleadoServices.GetAllAsync();
        }
        catch (Exception ex)
        {

        }
    }
}
